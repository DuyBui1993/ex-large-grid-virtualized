{"version":3,"sources":["utils/LargeTable.js","components/VirtualizeGrid.js","components/Grid.js","App.js","serviceWorker.js","index.js"],"names":["VirtualizeGrid","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","_updateGridRange","_","throttle","scrollTop","arguments","length","undefined","scrollLeft","_this$props","columnCount","rowCount","columnWidth","rowHeight","width","height","gridRanges","startColumnIndex","Math","max","floor","stopColumnIndex","min","threshHold","startRowIndex","stopRowIndex","columnIndex","rowIndex","cell","key","concat","style","position","left","top","push","setState","_handleScroll","e","_e$target","target","state","_this$props2","cellRenderer","restProps","objectWithoutProperties","maxWidth","maxHeight","react_default","a","createElement","onScroll","overflow","className","assign","map","React","Component","data","schemas","i","name","cellIndex","HARD_DATA","SCHEMA","CustomGrid","selecteds","isDragSelection","startSelected","_this2","onMouseUp","onMouseDown","classList","includes","_currentSelected$spli","split","_currentSelected$spli2","slicedToArray","onMouseMove","_currentSelected$spli3","_currentSelected$spli4","_this2$state$startSel","_this2$state$startSel2","startColIndex","minRowIndex","Number","maxRowIndex","minColIndex","maxColIndex","newSelecteds","j","components_VirtualizeGrid","_ref","onClick","window","innerWidth","innerHeight","App","Grid","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7dcc53f2.chunk.js","sourcesContent":["var data = []\nvar schemas = []\n\n\n// generate columns - sample: 1.000 columns\nfor (let i = 0; i < 1000; i++) {\n  schemas.push({ name: `col_${i+1}`})\n}\n\n// generate rows - sample : 1.000 rows\nvar cellIndex = 0\nfor (let i = 0; i < 1000; i++) {\n  data.push(schemas.map(_ => ++cellIndex))\n}\n\nexport const HARD_DATA = data\nexport const SCHEMA = schemas","import React from 'react'\nimport _ from 'lodash'\n\nclass VirtualizeGrid extends React.Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      gridRanges: []\n    }\n  }\n\n  componentDidMount() {\n    this._updateGridRange()\n  }\n\n  _updateGridRange = _.throttle((scrollTop = 0, scrollLeft = 0) => {\n    const { columnCount, rowCount, columnWidth, rowHeight, width, height } = this.props\n    let gridRanges = []\n    const threshHold = 5\n    const startColumnIndex = Math.max(Math.floor(Math.max(scrollLeft / columnWidth, 0)) - threshHold, 0)\n    const stopColumnIndex = Math.min(startColumnIndex + Math.floor(width / columnWidth + threshHold * 3), columnCount)\n    const startRowIndex = Math.max(Math.floor(Math.max(scrollTop / rowHeight, 0)) - threshHold, 0)\n    const stopRowIndex = Math.min(startRowIndex + Math.floor(height / rowHeight + threshHold * 3), rowCount)\n    for (let columnIndex = startColumnIndex; columnIndex < stopColumnIndex; columnIndex++) {\n      for(let rowIndex = startRowIndex; rowIndex < stopRowIndex; rowIndex++) {\n        const cell = {\n          key: `${rowIndex}-${columnIndex}`,\n          style: {\n            position: 'absolute',\n            left: columnIndex * columnWidth,\n            top: rowIndex * rowHeight,\n            width: columnWidth,\n            height: rowHeight,\n          },\n          columnIndex,\n          rowIndex\n        }\n        gridRanges.push(cell)\n      }\n    }\n    this.setState({ gridRanges })\n  }, 10)\n\n  _handleScroll = (e) => {\n    const { scrollTop, scrollLeft } = e.target\n    this._updateGridRange(scrollTop, scrollLeft)\n  }\n\n  render() {\n    const { gridRanges } = this.state\n    const { cellRenderer, columnCount, columnWidth, rowCount, rowHeight, height, width, ...restProps } = this.props\n    const maxWidth = columnWidth * columnCount\n    const maxHeight = rowHeight * rowCount\n    return (\n      <div\n        onScroll={this._handleScroll}\n        style={{ height, width, position: 'relative', overflow: 'auto' }} className=\"ReactVirtualized__Grid\">\n        <div\n          className=\"ReactVirtualized__Grid__innerScrollContainer\"\n          style={{\n            maxWidth,\n            maxHeight,\n            width: maxWidth,\n            height: maxHeight\n          }}\n          {...restProps}\n        >\n          {gridRanges.map(cell => {\n            const { key, style, columnIndex, rowIndex } = cell\n            const component = cellRenderer({ columnIndex, key, rowIndex, style })\n            return component\n          })}\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default VirtualizeGrid","import 'react-virtualized/styles.css'\nimport React from 'react'\n// import { Grid } from 'react-virtualized'\nimport Grid from './VirtualizeGrid'\nimport { HARD_DATA, SCHEMA } from '../utils/LargeTable'\n\nclass CustomGrid extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      selecteds: [],\n      isDragSelection: false,\n      startSelected: null\n    }\n  }\n\n  render() {\n    return (\n      <div\n        onMouseUp={() => {\n          this.setState({\n            isDragSelection: false,\n            startSelected: null\n          })\n        }}\n        onMouseDown={(e) => {\n          if (e.target && e.target.classList[1] && e.target.classList[1].includes('cell-')) {\n            const currentSelected = e.target.classList[1]\n            const [_, rowIndex, columnIndex] = currentSelected.split('-')\n            if (this.state.startSelected === null) {\n              this.setState({\n                startSelected: `${rowIndex}-${columnIndex}`,\n                selecteds: []\n              })\n            }\n            this.setState({\n              isDragSelection: true,\n            })\n          }\n        }}\n        onMouseMove={(e) => {\n          if (!this.state.isDragSelection) return\n          if (e.target && e.target.classList[1] && e.target.classList[1].includes('cell-')) {\n            const currentSelected = e.target.classList[1]\n            const [_, rowIndex, columnIndex] = currentSelected.split('-')\n            const [startRowIndex, startColIndex] = this.state.startSelected.split('-')\n            const minRowIndex = Math.min(Number(rowIndex), Number(startRowIndex))\n            const maxRowIndex = Math.max(Number(rowIndex), Number(startRowIndex))\n            const minColIndex = Math.min(Number(columnIndex), Number(startColIndex))\n            const maxColIndex = Math.max(Number(columnIndex), Number(startColIndex))\n\n            let newSelecteds = []\n            for(let i = minRowIndex; i <= maxRowIndex; i++) {\n              for(let j = minColIndex; j <= maxColIndex; j++) {\n                newSelecteds.push(`${i}-${j}`)\n              }\n            }\n            this.setState({\n              selecteds: newSelecteds\n            })\n          }\n        }}\n      >\n        <Grid\n          cellRenderer={({ columnIndex, key, rowIndex, style }) => {\n            return (\n              <div\n                key={key}\n                className={`cell cell-${rowIndex}-${columnIndex} ${this.state.selecteds.includes(`${rowIndex}-${columnIndex}`) ? 'selected' : ''}`}\n                style={style}\n                onClick={() => {\n                  this.setState({\n                    selecteds: [`${rowIndex}-${columnIndex}`]\n                  })\n                }}\n              >\n                {HARD_DATA[rowIndex][columnIndex]}\n              </div>\n            )\n          }}\n          columnCount={SCHEMA.length}\n          columnWidth={window.innerWidth / 5 - 25}\n          rowCount={HARD_DATA.length}\n          rowHeight={30}\n          height={window.innerHeight}\n          width={window.innerWidth}\n        /> \n      </div>\n    )\n  }\n}\n\nexport default CustomGrid","import React from 'react';\nimport './App.css';\nimport Grid from './components/Grid'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Grid />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}