{"version":3,"sources":["utils/LargeTable.js","components/Grid.js","App.js","serviceWorker.js","index.js"],"names":["data","schemas","i","push","name","concat","cellIndex","map","col","HARD_DATA","SCHEMA","CustomGrid","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","selecteds","isDragSelection","startSelected","_this2","react_default","a","createElement","onMouseUp","setState","onMouseDown","e","target","classList","includes","_currentSelected$spli","split","_currentSelected$spli2","slicedToArray","rowIndex","columnIndex","onMouseMove","_currentSelected$spli3","_currentSelected$spli4","_this2$state$startSel","_this2$state$startSel2","startRowIndex","startColIndex","minRowIndex","_","min","Number","maxRowIndex","max","minColIndex","maxColIndex","newSelecteds","j","es","cellRenderer","_ref","key","style","className","onClick","columnCount","length","columnWidth","window","innerWidth","rowCount","rowHeight","height","innerHeight","width","React","Component","App","Grid","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8b53c2ba.chunk.js","sourcesContent":["var data = []\nvar schemas = []\n\n\n// generate columns - sample: 1.000 columns\nfor (let i = 0; i < 1000; i++) {\n  schemas.push({ name: `col_${i+1}`})\n}\n\n// generate rows - sample : 1.000 rows\nvar cellIndex = 0\nfor (let i = 0; i < 1000; i++) {\n  data.push(schemas.map(col => ++cellIndex))\n}\n\nexport const HARD_DATA = data\nexport const SCHEMA = schemas","import 'react-virtualized/styles.css'\nimport React from 'react'\nimport { Grid } from 'react-virtualized'\nimport _ from 'lodash'\nimport { HARD_DATA, SCHEMA } from '../utils/LargeTable'\n\nclass CustomGrid extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      selecteds: [],\n      isDragSelection: false,\n      startSelected: null\n    }\n  }\n\n  render() {\n    return (\n      <div\n        onMouseUp={() => {\n          this.setState({\n            isDragSelection: false,\n            startSelected: null\n          })\n        }}\n        onMouseDown={(e) => {\n          if (e.target && e.target.classList[1] && e.target.classList[1].includes('cell-')) {\n            const currentSelected = e.target.classList[1]\n            const [_, rowIndex, columnIndex] = currentSelected.split('-')\n            if (this.state.startSelected === null) {\n              this.setState({\n                startSelected: `${rowIndex}-${columnIndex}`,\n                selecteds: []\n              })\n            }\n            this.setState({\n              isDragSelection: true,\n            })\n          }\n        }}\n        onMouseMove={(e) => {\n          if (!this.state.isDragSelection) return\n          if (e.target && e.target.classList[1] && e.target.classList[1].includes('cell-')) {\n            const currentSelected = e.target.classList[1]\n            const [__, rowIndex, columnIndex] = currentSelected.split('-')\n            const [startRowIndex, startColIndex] = this.state.startSelected.split('-')\n            const minRowIndex = _.min([Number(rowIndex), Number(startRowIndex)])\n            const maxRowIndex = _.max([Number(rowIndex), Number(startRowIndex)])\n            const minColIndex = _.min([Number(columnIndex), Number(startColIndex)])\n            const maxColIndex = _.max([Number(columnIndex), Number(startColIndex)])\n\n            let newSelecteds = []\n            for(let i = minRowIndex; i <= maxRowIndex; i++) {\n              for(let j = minColIndex; j <= maxColIndex; j++) {\n                newSelecteds.push(`${i}-${j}`)\n              }\n            }\n            this.setState({\n              selecteds: newSelecteds\n            })\n          }\n        }}\n      >\n        <Grid\n          cellRenderer={({ columnIndex, key, rowIndex, style }) => {\n            return (\n              <div\n                key={key}\n                className={`cell cell-${rowIndex}-${columnIndex} ${this.state.selecteds.includes(`${rowIndex}-${columnIndex}`) ? 'selected' : ''}`}\n                style={style}\n                onClick={() => {\n                  this.setState({\n                    selecteds: [`${rowIndex}-${columnIndex}`]\n                  })\n                }}\n              >\n                {HARD_DATA[rowIndex][columnIndex]}\n              </div>\n            )\n          }}\n          columnCount={SCHEMA.length}\n          columnWidth={window.innerWidth / 5 - 25}\n          rowCount={HARD_DATA.length}\n          rowHeight={30}\n          height={window.innerHeight}\n          width={window.innerWidth}\n        /> \n      </div>\n    )\n  }\n}\n\nexport default CustomGrid","import React from 'react';\nimport './App.css';\nimport Grid from './components/Grid'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Grid />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}